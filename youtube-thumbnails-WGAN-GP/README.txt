WGAN-GP for Generating Artificial YouTube Thumbnails
@author Saad Moro

This repository implements a WGAN-GP in Pytorch for the purpose of generating synthetic YouTube thumbnails. A few steps are needed in order to run the GAN. First, a relevant dataset needs to be built. The GAN is trained on a large number of 100x100 pixel images, scraped from YouTube. First, "scraper.py" needs to be run in order to populate the "thumbs" folder with thumbnail images. Near the top of "scraper.py", two variables need to be changed in order to run. First, api_key must be set to the user's YouTube API key- tutorials on how to obtain one are available online. Second, playlist_id must be set equal to the id of a YouTube playlist. This GAN was made in order to generate video gaming content thumbnails, and so I used playlists that were the entire channel uploads of large gaming channels. Once these two strings are properly defined, run scraper.py on various playlists until an adequately sized dataset is created. Then, run "resizer.py" in order to convert the large thumbnails in the "thumbs" folder into 100x100 pixel versions. Next, rename the "resized" folder to "images" and drag into the "one_class" folder. 

Once the above setup has been completed,"DCGAN_train.py" may be ran in order to train the generative adversarial network on the collected dataset of thumbnails. The model built from methods and objects spread across a few different files. The Wasserstein GAN is implemented in "Model.py", and the gradient penalty method used to create a WGAN-GP model is contained in "Utils.py". By default, the code uses CUDA to run, and Torchvision to produce visualizations of output. "DCGAN_train.py", "Model.py" and "Utils.py" were written based on the explanatory content on Aladdin Persson's YouTube channel.